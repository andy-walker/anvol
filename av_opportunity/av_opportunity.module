<?php

/**
 * ANVol Opportunity
 * Contains customizations relating to the 'opportunity' content type
 * @author  andyw@circle
 * @package av_opportunity
 */

/**
 * Implementation of hook_comment_insert
 */
function av_opportunity_comment_insert($comment) {
    # hack to force computed field for 'Time spent' on Volunteer Opportunity nodes to update, 
    # whenever a comment is saved - loading the node and saving it should accomplish that.
    if ($node = node_load($comment->nid) and $node->type == 'opportunity')
        node_save($node);
}

/**
 * Implementation of hook_form_alter
 */
function av_opportunity_form_alter(&$form, &$form_state, $form_id) {

    switch ($form_id) {
        
        # 'Opportunity' edit form
        case 'opportunity_node_form':

            # remove breadcrumb as per client request
            drupal_set_breadcrumb('');

            # add javascript to format taxonomy list
            drupal_add_js("
                
                jQuery(function() {
                    jQuery('#edit-field-opportunity-region-und option').each(function() {
                        if (!jQuery(this).html().match(/^\-/) && jQuery(this).val() != '_none')
                            jQuery(this).attr('disabled', 'disabled');
                    });
                    jQuery('#edit-field-opportunity-region-und option[value=\"_none\"]').html('Any');
                });

            ", array(
                  'type'  => 'inline',
                  'scope' => 'header'
               )
            );

            break;
        
        
        case 'views_exposed_form':

            switch (reset(explode('?', request_uri()))) {
                
                # remove breadcrumb and mark exposed filter submit 'Update List'
                case '/volunteering/charity-opportunities':
                    drupal_set_breadcrumb('');
                    $form['submit']['#value'] = t('Update List'); 
                    break;   

                # just mark exposed filter submit 'Update List'
                case '/assessor/opportunities':
                case '/volunteer/opportunities/search':
                    $form['submit']['#value'] = t('Update List');
                    break;                  
            
            }
 
            break;

   
    }

}

/**
 * Implementation of hook_init
 */
function av_opportunity_init() {

    # register dependency autoloader
    spl_autoload_register('_av_opportunity_autoload');           

}

/**
 * Implementation of hook_node_presave
 */
function av_opportunity_node_presave($node) {

    switch (true) {
        
        # when node is a vol_opp that's being updated, and the status has changed ..
        case $node->type == 'opportunity'
             and isset($node->original) 
             and $node->field_opportunitystate['und'][0]['value'] !=
                 $node->original->field_opportunitystate['und'][0]['value']:

            # mark pending status change op - we'll perform this after the node is saved to prevent
            # interfering with the node save process if any errors occur
            $status = &drupal_static('opportunity_status_change', (object)array(
                'old' => $node->original->status,
                'new' => $node->status
            ));

            break;

        # when node is a vol_opp that's being updated, and a volunteer has been assigned ..
        case $node->type == 'opportunity'
            and isset($node->original)
            and $node->field_volunteer4opp['und'][0]['uid'] !=
                $node->original->field_volunteer4opp['und'][0]['uid']:

            break;


    }

}

/**
 * Implementation of hook_node_update
 */
function av_opportunity_node_update($node) {

    static $flag = 0;
    
    # if we have a status change operation pending, perform that now
    if ($node->type == 'opportunity' and $status = drupal_static('opportunity_status_change'))
        new Opportunity_Status_Change(
            $node->nid, 
            $status->old, 
            $status->new
        );

    $assignedVol = $node->field_volunteer4opp['und'][0]['uid'];
    $originalVol = $node->original->field_volunteer4opp['und'][0]['uid'];

    //watchdog('nathannode', '<pre>' . print_r($node, true) . '</pre>');

    # create a relationship on assigned volunteer to the Charity
    if($node->type == 'opportunity' and isset($assignedVol) and !$flag++) {

        watchdog('nathannode', '<pre>' . print_r($node, true) . '</pre>');

        civicrm_initialize();

        # get contact_id from logged-in user
        $session =& CRM_Core_Session::singleton();
        $indID = $session->get('userID');
    
        # assigned volunteer's uid
        $volunteer = $node->field_volunteer4opp['und'][0]['uid'];
    
        # get the matched civicrm contact from the drupal user record
        $UFMatch = civicrm_api("UFMatch", "get", array(
                'version'   => '3',
                'uf_id'     => $volunteer
            )
        );
    
        $UFMatchID = $UFMatch['id'];

        $volunteer_id = $UFMatch['values'][$UFMatchID]['contact_id'];

        # get the Opportunity Contact to assign a relationship
        if(!empty($node->field_charity_name['und'][0]['contact_id'])) {
            $OppContact = $node->field_charity_name['und'][0]['contact_id'];
            $rel_id = '5';
        } else {
            $OppContact = $node->field_client_contact['und'][0]['contact_id'];
            $rel_id = '17';
        }
        
        if($assignedVol !== $originalVol)  {

            # get the start date for the relationship
            $start = date('m/j/Y');
    
            # create a relationship of type 'Volunteer Is' for assigned volunteer
            $VolRelationship = civicrm_api("Relationship", "Create", array(
                    'version'               => '3',
                    'is_active'             => '1',
                    'relationship_type_id'  => $rel_id,
                    'contact_id_b'          => $volunteer_id,
                    'contact_id_a'          => $OppContact,
                    'start_date'            => $start
                )
            );
        }

        watchdog('nathannode', '<pre>' . print_r($VolRelationship, true) . '</pre>');
            
        # if op has been completed, end the relationship
        if(($node->field_completed['und'][0]['value'] !== $node->original->field_completed['und'][0]['value']
             and $node->field_completed['und'][0]['value'] === 1) || ($assignedVol !== $originalVol and !empty($originalVol))) {

        if($node->field_completed['und'][0]['value'] === 1) {  
            $OppRelationship = civicrm_api("Relationship", "Get", array(
                    'version'               => '3',
                    'relationship_type_id'  => $rel_id,
                    'contact_id_b'          => $volunteer_id,
                    'contact_id_a'          => $OppContact
                )
            );
        }

        if($assignedVol !== $originalVol) {

            $volunteer = $node->original->field_volunteer4opp['und'][0]['uid'];
    
            # get the matched civicrm contact from the drupal user record
            $UFMatch = civicrm_api("UFMatch", "get", array(
                    'version'   => '3',
                    'uf_id'     => $volunteer
                )
            );
    
            $UFMatchID = $UFMatch['id'];

            $volunteer_id = $UFMatch['values'][$UFMatchID]['contact_id'];

            $OppRelationship = civicrm_api("Relationship", "Get", array(
                    'version'               => '3',
                    'relationship_type_id'  => $rel_id,
                    'contact_id_b'          => $volunteer_id,
                    'contact_id_a'          => $OppContact
                )
            );
        }

            //watchdog('nathannode', '<pre>' . print_r($OppRelationship, true) . '</pre>');

            $relID = $OppRelationship['id'];

            # need to check re-assigned vol
            if((isset($relID)) || (isset($relID) and $assignedVol !== $originalVol)) {
                # get the end date for the relationship
                $end = date('m/j/Y');

                # if the opportunity is complete, end the volunteer relationship to the charity
                $EndRelationship = civicrm_api("Relationship", "Update", array(
                        'version'   => '3',
                        'id'        => $OppRelationship['values'][$relID]['id'],
                        'is_active' => 0,
                        'end_date'  => $end
                    )
                );

                $regcoord = $node->field_assign_regional_controller['und'][0]['uid'];

                # get the matched civicrm contact from the drupal user record
                $RegUFMatch = civicrm_api("UFMatch", "Get", array(
                        'version'   => '3',
                        'uf_id'     => $regcoord
                    )
                );

                $RegUFMatchID = $RegUFMatch['id'];

                # regional coordinator civicrm contact id
                $regcoord_id = $RegUFMatch['values'][$RegUFMatchID]['contact_id'];

                # create an activity of type 'Volunteering Opportunity' on completion
                $OpActivity = civicrm_api("Activity", "Create", array(
                        'version'                    => '3',
                        'activity_type_id'           => '33',
                        'activity_subject'           => 'Volunteering Opportunity',
                        'source_contact_id'          => $regcoord_id, # Reg co-ordinator
                        'assignee_contact_id'        => $volunteer_id, # Volunteer
                        'target_contact_id'          => $volunteer_id, # Volunteer
                        'status_id'                  => '4',
                        'detail'                     => $node->body['und'][0]['value']
                    )
                );
            }
        }
    }
}

/**
 * Implementation of hook_node_view
 */
function av_opportunity_node_view($node, $view_mode, $langcode) {

    if($node->type == 'opportunity') {
        
        global $user;
        civicrm_initialize();

        # get the contact id from the logged-in user
        $session =& CRM_Core_Session::singleton();
        $indID = $session->get('userID');

        # get the Opportunity Contact to assign a relationship - set the relationship id based on the opportunity contact
        if(!empty($node->field_charity_name['und'][0]['contact_id'])) {
            $OppContact = $node->field_charity_name['und'][0]['contact_id'];
            $rel_id = '5';
        } else {
            $OppContact = $node->field_client_contact['und'][0]['contact_id'];
            $rel_id = '17';
        }

        //hide($node->field_client_contact['und'][0]['contact_id']);

        # assigned volunteer's uid
        $volunteer = $node->field_volunteer4opp['und'][0]['uid'];

        if(isset($volunteer)) {
            # get the matched civicrm contact from the drupal user record
            $volUFMatch = civicrm_api("UFMatch", "get", array(
                    'version'   => '3',
                    'uf_id'     => $volunteer
                )
            );

            # get the volunteer civicrm contact id
            $volUFMatchID = $volUFMatch['id'];

            # does the volunteer have an employee relationship with the client?
            $volRel = civicrm_api("Relationship", "Get", array(
                    'version'               => 3,
                    'contact_id_b'          => $indID,
                    'contact_id_a'          => $OppContact,
                    'relationship_type_id'  => $rel_id
                )
            );

            $volRelID = $volRel['id'];

            $assigned_vol = $volUFMatch['values'][$volUFMatchID]['contact_id'];

            if($assigned_vol === $indID) {
                watchdog('nathantest', 'testing');
            }

            # the relationship exists? Great! show the node comments
            if((!empty($volRel['values']) and $volRel['values'][$volRelID]['is_active'] == 1) || (in_array('Administrator', $user->roles))) {
                $node->comment = 2; # comment (0 = disabled, 1 = read only, 2 = read/write)
            } else {
                $node->comment = 0;
            }
        }

        if(!isset($volunteer) and !in_array('Administrator', $user->roles)) {
            $node->comment = 0;
        }

        //watchdog('nathannode2', '<pre>' . print_r($node, true) . '</pre>');

        return $node;
    } 
}

function av_opportunity_node_view_alter(&$build) {

    global $user;

    # hide the client contact for volunteers that are not assigned.
    if(isset($build['field_client_contact'])) {

        $node = $build['field_client_contact']['#object'];

        # assigned volunteer's uid
        $volunteer = $node->field_volunteer4opp['und'][0]['uid'];

        if($volunteer != $user->uid) {
            # you aren't the assigned volunteer? sorry, you can't see this field
            $build['field_client_contact']['#access'] = FALSE;
        }

        # admin overwrite
        if(in_array('Administrator', $user->roles)) {
            $build['field_client_contact']['#access'] = TRUE;
        }
    }
}

/**
 * Autoload callback
 */
function _av_opportunity_autoload($entity) {

    if (strpos($entity, 'Opportunity') === 0)
        module_load_include('php', 'av_opportunity', sprintf(
            'classes/class.%s', strtolower(implode('-', array_splice(explode('_', $entity), 1)))
        ));

}
