<?php

/**
 * ANVol Opportunity
 * Contains customizations relating to the 'opportunity' content type
 * @author  andyw@circle
 * @package av_opportunity
 */

/**
 * Implementation of hook_comment_insert
 */
function av_opportunity_comment_insert($comment) {
    # hack to force computed field for 'Time spent' on Volunteer Opportunity nodes to update, 
    # whenever a comment is saved - loading the node and saving it should accomplish that.
    if ($node = node_load($comment->nid) and $node->type == 'vol_opp')
        node_save($node);
}

/**
 * Implementation of hook_form_alter
 */
function av_opportunity_form_alter(&$form, &$form_state, $form_id) {

    switch ($form_id) {
        
        # remove breadcrumb on following form, as per client request
        case 'volunteer_opportunity_node_form':
            drupal_set_breadcrumb('');
            break;
        
        
        case 'views_exposed_form':

            switch (reset(explode('?', request_uri()))) {
                
                # remove breadcrumb and mark exposed filter submit 'Update List'
                case '/volunteering/charity-opportunities':
                    drupal_set_breadcrumb('');
                    $form['submit']['#value'] = t('Update List'); 
                    break;   

                # just mark exposed filter submit 'Update List'
                case '/assessor/opportunities':
                case '/volunteer/opportunities/search':
                    $form['submit']['#value'] = t('Update List');
                    break;                  
            
            }
 
            break;
    
    }

}

/**
 * Implementation of hook_init
 */
function av_opportunity_init() {

    # register dependency autoloader
    spl_autoload_register('_av_opportunity_autoload');           

}

/**
 * Implementation of hook_node_presave
 */
function av_opportunity_node_presave($node) {

    switch (true) {
        
        # when node is a volunteer_opportunity that's being updated, and the status has changed ..
        case $node->type == 'volunteer_opportunity'
             and isset($node->original) 
             and $node->field_opportunitystate['und'][0]['value'] !=
                 $node->original->field_opportunitystate['und'][0]['value']:

            # mark pending status change op - we'll perform this after the node is saved to prevent
            # interfering with the node save process if any errors occur
            $status = &drupal_static('opportunity_status_change', (object)array(
                'old' => $node->original->status,
                'new' => $node->status
            ));

            break;

        # when node is a volunteer_opportunity that's being updated, and a volunteer has been assigned ..
        case $node->type == 'volunteer_opportunity'
            and isset($node->original)
            and $node->field_volunteer4opp['und'][0]['uid'] !=
                $node->original->field_volunteer4opp['und'][0]['uid']:

            break;


    }

}

/**
 * Implementation of hook_node_update
 */
function av_opportunity_node_update($node) {

    static $flag = 0;
    
    # if we have a status change operation pending, perform that now
    if ($node->type == 'volunteer_opportunity' and $status = drupal_static('opportunity_status_change'))
        new Opportunity_Status_Change(
            $node->nid, 
            $status->old, 
            $status->new
        );

    # create a relationship on assigned volunteer to the Charity
    if($node->type == 'vol_opp' and isset($node->field_volunteer4opp['und'][0]['uid']) and !$flag++) {

        civicrm_initialize();

        # get contact_id from logged-in user
        $session =& CRM_Core_Session::singleton();
        $indID = $session->get('userID');
    
        # assigned volunteer's uid
        $volunteer = $node->field_volunteer4opp['und'][0]['uid'];
    
        # get the matched civicrm contact from the drupal user record
        $UFMatch = civicrm_api("UFMatch", "get", array(
                'version'   => '3',
                'uf_id'     => $volunteer
            )
        );
    
        $UFMatchID = $UFMatch['id'];
        
        if($node->field_volunteer4opp['und'][0]['uid'] !== $node->orginal->field_volunteer4opp['und'][0]['uid']) {
    
            # create a relationship of type 'Volunteer Is' for assigned volunteer
            $VolRelationship = civicrm_api("Relationship", "Create", array(
                    'version'               => '3',
                    'is_active'             => '1',
                    'relationship_type_id'  => '5',
                    'contact_id_b'          => $UFMatch['values'][$UFMatchID]['contact_id'],
                    'contact_id_a'          => $node->field_cid['und'][0]['value']
                )
            );
        }  
            
        # if op has been completed, end the relationship
        if($node->field_completed['und'][0]['value'] !== $node->original->field_completed['und'][0]['value']
             and $node->field_completed['und'][0]['value'] === 1) {

            # get the end date for the relationship
            $today = date('m/j/Y');

            $OppRelationship = civicrm_api("Relationship", "Get", array(
                    'version'               => '3',
                    'relationship_type_id'  => '5',
                    'contact_id_b'          => $UFMatch['values'][$UFMatchID]['contact_id'],
                    'contact_id_a'          => $node->field_cid['und'][0]['value']
                )
            );

            $relID = $OppRelationship['id'];

            if(isset($relID)) {
                # if the opportunity is complete, end the volunteer relationship to the charity
                $EndRelationship = civicrm_api("Relationship", "Update", array(
                        'version'   => '3',
                        'id'        => $OppRelationship['values'][$relID]['id'],
                        'is_active' => 0,
                        'end_date'  => $today
                    )
                );
    
                # create an activity of type 'Volunteering Opportunity' on completion
                $OpActivity = civicrm_api("Activity", "Create", array(
                        'version'                    => '3',
                        'activity_type_id'           => '33',
                        'activity_subject'           => 'Volunteering Opportunity',
                        'source_contact_id'          => $node->field_cid['und'][0]['value'],
                        'assignee_contact_id'        => $UFMatch['values'][$UFMatchID]['contact_id'],
                        'target_contact_id'          => $UFMatch['values'][$UFMatchID]['contact_id'],
                        'status_id'                  => '4',
                        'details'                    => 'some node detail'
                    )
                );
            }  
        }
    }
}

/**
 * Autoload callback
 */
function _av_opportunity_autoload($entity) {

    if (strpos($entity, 'Opportunity') === 0)
        module_load_include('php', 'av_opportunity', sprintf(
            'classes/class.%s', strtolower(implode('-', array_splice(explode('_', $entity), 1)))
        ));

}
